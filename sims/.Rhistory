beta <- 1
(mu <- alpha / (alpha + beta))
(sd <- sqrt(alpha * beta / ((alpha + beta)^2 * (alpha + beta + 1))))
alpha <- 2
beta <- 10
(mu <- alpha / (alpha + beta))
(sd <- sqrt(alpha * beta / ((alpha + beta)^2 * (alpha + beta + 1))))
alpha <- 10
beta <- 2
(mu <- alpha / (alpha + beta))
(sd <- sqrt(alpha * beta / ((alpha + beta)^2 * (alpha + beta + 1))))
install.packages("UsingR")
data(father.son)
library(father.son)
library(UsingR)
data(father.son)
father.son
? plot
? plot
x1 <- seq(-6, -3, length.out = 300)
x2 <- seq(-3, 0, length.out = 300)
x3 <- seq(0, 3, length.out = 300)
m <- 0
f1 <- 8*x1^2 + 45*x1 + 67.5 - m/2 * x1^2
f2 <- 1/2 * x2^2 - m/2 * x2^2
f3 <- 8 * x3^2 - m/2 * x3^2
plot(c(x1,x2,x3),
c(f1,f2,f3))
m <- 1
f1 <- 8*x1^2 + 45*x1 + 67.5 - m/2 * x1^2
f2 <- 1/2 * x2^2 - m/2 * x2^2
f3 <- 8 * x3^2 - m/2 * x3^2
plot(c(x1,x2,x3),
c(f1,f2,f3))
plot(c(x1,x2,x3),
c(f1,f2,f3), type = "l")
m <- 16
f1 <- 8*x1^2 + 45*x1 + 67.5 - m/2 * x1^2
f2 <- 1/2 * x2^2 - m/2 * x2^2
f3 <- 8 * x3^2 - m/2 * x3^2
plot(c(x1,x2,x3),
c(f1,f2,f3), type = "l")
m <- 2
f1 <- 8*x1^2 + 45*x1 + 67.5 - m/2 * x1^2
f2 <- 1/2 * x2^2 - m/2 * x2^2
f3 <- 8 * x3^2 - m/2 * x3^2
plot(c(x1,x2,x3),
c(f1,f2,f3), type = "l")
run_1a <- function(m) {
x1 <- seq(-6, -3, length.out = 300)
x2 <- seq(-3, 0, length.out = 300)
x3 <- seq(0, 3, length.out = 300)
f1 <- 8*x1^2 + 45*x1 + 67.5 - m/2 * x1^2
f2 <- 1/2 * x2^2 - m/2 * x2^2
f3 <- 8 * x3^2 - m/2 * x3^2
plot(c(x1,x2,x3), c(f1,f2,f3), type = "l",
xlab = "x", ylab = "y", main = paste0("m = ", m))
}
run_1a(m = 0)
run_1a <- function(m) {
x1 <- seq(-6, -3, length.out = 300)
x2 <- seq(-3, 0, length.out = 300)
x3 <- seq(0, 3, length.out = 300)
f1 <- 8*x1^2 + 45*x1 + 67.5 - m/2 * x1^2
f2 <- 1/2 * x2^2 - m/2 * x2^2
f3 <- 8 * x3^2 - m/2 * x3^2
plot(c(x1,x2,x3), c(f1,f2,f3), type = "l",
xlab = "x", ylab = "g(x)", main = paste0("m = ", m))
}
run_1a(m = 1/2)
run_1a(m = 1)
run_1a(m = 2)
run_1a(m = 3)
run_1a(m = 4)
run_1a(m = 16)
run_1a(m = 17)
16*-100+45
100*16
run_1a(m = 0)
library(geigen)
? gsvd
n <- 50
p1 <- 100
p2 <- 100
p <- p1 + p2
K = 2
X1 <- matrix(rnorm(n*p1), nrow = n, ncol = p1)
X2 <- matrix(rnorm(n*p2), nrow = n, ncol = p2)
colMeans(X1)
X1 <- scale(matrix(rnorm(n*p1), nrow = n, ncol = p1), center = T, scale = F)
X2 <- scale(matrix(rnorm(n*p2), nrow = n, ncol = p2), center = T, scale = F)
X <- list(X1 = X1, X2 = X2)
colMeans(X1)
mygsvd <- gsvd(X1, X2)
str(mygsvd)
U1 <- mygsvd$U
U2 <- mygsvd$V
V <- mygsvd$Q
A <- mygsvd$A
B <- mygsvd$B
alpha <- mygsvd$alpha
beta <- mygsvd$beta
m <- mygsvd$m
k <- mygsvd$k
l <- mygsvd$l
tmp <- U %*% U''
tmp <- U %*% t(U)
mygsvd <- gsvd(X1, X2)
U1 <- mygsvd$U
U2 <- mygsvd$V
V <- mygsvd$Q
A <- mygsvd$A
B <- mygsvd$B
alpha <- mygsvd$alpha
beta <- mygsvd$beta
m <- mygsvd$m
k <- mygsvd$k
l <- mygsvd$l
tmp <- U1 %*% t(U1)
View(tmp)
tmp <- t(U1) %*% U
tmp <- t(U1) %*% U1
View(tmp)
tmp <- t(U2) %*% U2
View(tmp)
dim(U1)
max(U1 %*% t(U1) - diag(1,nrow(U1)))
max(U1 %*% t(U1) - diag(1,nrow(U1)))
max(t(U1) %*% U1 - diag(1,nrow(U1)))
max(U2 %*% t(U2) - diag(1,nrow(U2)))
max(t(U2) %*% U2 - diag(1,nrow(U2)))
max(V %*% t(V) - diag(1,nrow(V)))
max(t(V) %*% V - diag(1,nrow(V)))
dim(A)
A <- mygsvd$A; dim(A)
A <- mygsvd$A; dim(A)
B <- mygsvd$B; dim(B)
alpha <- mygsvd$alpha; length(alpha)
beta <- mygsvd$beta; length(beta)
View(A)
diag(A)
View(B)
max(B)
max(A)
k
l
m
dim(A)
dim(B)
? expand.grid
A = matrix(1:4, nrow = 4, ncol = 4)
A
rowSums(A)
expand.grid(1:4, 1:4)
1:4
expand.grid(1:3, 1:2)
grid = expand.grid(1:3, 1:2)
rowSums(grid)
grid = expand.grid(1:4, 1:4)
grid
rowSums(grid) %% 2
A = matrix(1:4, nrow = 4, ncol = 4)
? reshape
A
melt(A)
library(reshape2)
melt(A)
A[grid]
rowSums(grid) %% 2
c(A)
A
A_vec = c(A)
idx = rowSums(grid) %% 2
A_vec[idx]
A_vec
idx
idx = rowSums(grid) %% 2 == 0
A_vec[idx]
nrow(A)
ncol(A)
? rep
rep(NA, each = 10)
rep(NA, each = 16)
ptr <- 1
vec <- rep(1:16, each = 16)
vec
vec <- rep(1:16, each = 1)
vec
vec[1]
vec[4]
pnorm(1, c(0,1), c(1,1))
pnorm(1, c(0,1), 1
)
pnorm(1, c(0,1), 1)
? pnrom
? pnorm
install.packages("tidyverse")
a = 1:3
b = 4:6
rbind(a,b)
library(TCGA2STAT)
microrna <- getTCGA(disease="OV", data.type="miRNA_Array")
rnaseq_rpkm <- getTCGA(disease="OV", data.type="RNASeq", type="RPKM")
rnaseq_count <- getTCGA(disease="OV", data.type="RNASeq", type="count")
meth <- getTCGA(disease="OV", data.type="Methylation")
getwd()
library(simulator)
dir <- 'test'
create(dir)
? filter
knitr::opts_chunk$set(echo = TRUE)
set.seed(12345)
n_time <- 200 # number of time points
w <- rnorm(n_time + 50, 0, 1) # 50 extra to avoid startup problems
x <- filter(w, filter = c(1, -.9), method = "recursive")[-(1:50)] # remove first 50
plot.ts(x, main = "Autoregression")
set.seed(12345)
n_time <- 200 # number of time points
w <- rnorm(n_time + 50, 0, 1) # 50 extra to avoid startup problems
x <- filter(w, filter = c(1, -.9), method = "recursive")[-(1:50)] # remove first 50
plot.ts(x, main = "Autoregression")
set.seed(12345)
n_time <- 200 # number of time points
w <- rnorm(n_time + 50, 0, 1) # 50 extra to avoid startup problems
x <- filter(w, filter = c(1, -.9), method = "recursive")[-(1:50)] # remove first 50
plot.ts(x, main = "Autoregression")
set.seed(1234)
n_time <- 200 # number of time points
w <- rnorm(n_time + 50, 0, 1) # 50 extra to avoid startup problems
x <- filter(w, filter = c(1, -.9), method = "recursive")[-(1:50)] # remove first 50
plot.ts(x, main = "Autoregression")
plot.ts(x, main = expression(X_t = X_{t-1}))
plot.ts(x, main = expression(X_t = X_(t-1))
)
? acf
set.seed(12345)
n_time <- 200 # number of time points
w <- rnorm(n_time + 50, 0, 1) # 50 extra to avoid startup problems
X <- filter(w, filter = c(1, -.9), method = "recursive")[-(1:50)] # remove first 50
plot.ts(X, main = "Autoregression")
acf(X, type = "correlation")
acf(X, type = "correlation")
pacf(X, main = "PACF for Series X")
? filter
? filter
? acf
set.seed(12345)
n_time <- 200
w <- rnorm(n_time + 50, 0, 1) # 50 extra to avoid startup problems
X <- filter(w, filter = c(1,-.9), method = "recursive")[-(1:50)] # remove first 50
plot.ts(X, main = "Autoregression")
acf(X, type = "correlation", main = "ACF for Series X")
pacf(X, main = "PACF for Series X")
library(astsa)
library(forecast)
library(tseries)
install.packages("forecast")
library(astsa)
library(forecast)
library(tseries)
sarima
? sarima
knitr::opts_chunk$set(
echo = TRUE,
warning = FALSE,
message = FALSE)
library(TCGA2STAT)
# ovarian cancer miRNA data
mirna <- getTCGA(disease = "OV", data.type = "miRNA_Array", clinical = TRUE)
str(mirna)
# TCGA2STAT clinical variables
colnames(mirna$clinical)
as.matrix(apply(mirna$clinical, 2, FUN = function(X) {sum(is.na(X))}))
# breast cancer mRNA data
mrna <- getTCGA(disease = "BRCA", data.type = "mRNA_Array", clinical = TRUE)
# TCGA2STAT clinical variables
colnames(mrna$clinical)
as.matrix(apply(mrna$clinical, 2, FUN = function(X) {sum(is.na(X))}))
unlink('My Documents/Research/iPCA/Meeting Notes/update_18_03_28/update_18_03_29_cache', recursive = TRUE)
unlink('My Documents/Research/iPCA/Meeting Notes/update_18_03_28/update_18_03_29_cache', recursive = TRUE)
library(foreach)
library(doParallel)
library(parallel)
makePSOCKcluster(2)
cl <- makePSOCKcluster(2)
cl <- makeCluster(2)
stopCluster(cl)
cl <- makeCluster(2)
stopCluster(cl)
library(foreach)
library(doParallel)
library(parallel)
Xs <- list()
Xs[[1]] <- matrix(rnorm(5000*100), nrow = 100)
Xs[[2]] <- matrix(rnorm(6000*100), nrow = 100)
ptm <- proc.time()
for ( i in 1:2) {
tmp <- svd(Xs[[i]])
}
proc.time()-ptm
stopCluster(cl)
cl <- makePSOCKcluster(2)
ptm <- proc.time()
for ( i in 1:2) {
tmp <- svd(Xs[[i]])
}
proc.time()-ptm
stopCluster(cl)
ptm <- proc.time()
for ( i in 1:2) {
tmp <- svd(Xs[[i]])
}
proc.time()-ptm
setwd("~/My Documents/Research/iPCA/R Public/sims")
library(reshape2)
library(RColorBrewer)
library(R.matlab)
library(simulator)
library(randomForest)
library(R.utils)
library(plotly)
library(foreach)
library(doParallel)
sourceDirectory("../utils/", modifiedOnly = F, recursive = F) # useful functions
sourceDirectory("../funs/", modifiedOnly = F, recursive = F) # useful functions
library(reshape2)
library(RColorBrewer)
library(R.matlab)
library(simulator)
library(randomForest)
library(R.utils)
library(plotly)
library(foreach)
library(doParallel)
sourceDirectory("../utils/", modifiedOnly = F, recursive = F) # useful functions
sourceDirectory("../funs/", modifiedOnly = F, recursive = F) # useful functions
nsim <- 2
param_name <- "dim_U"
params <- c(2, 3, 5, 10)
avg_err_df <- as.data.frame(matrix(NA, nrow = 10, ncol = length(params)))
colnames(avg_err_df) <- params
rownames(avg_err_df) <- c("pca1", "pca2", "pca3", "concatenated", "distributed",
"mfa", "jive", "addfrob", "multfrob", "l1")
param <- 2
# make sims data
sims <- ipca_noncluster_model(nsim = nsim, dim_U = param)
str(sims)
metric_df <- data.frame(pca1 = NULL, pca2 = NULL, pca3 = NULL,
concatenated = NULL, distributed = NULL, mfa = NULL,
jive = NULL, addfrob = NULL, multfrob = NULL,
l1 = NULL)
i = 1
sim <- sims[[i]]
sim_data <- sim$sim_data
truth <- sim$truth
Sig_true <- truth$Sig_true
dim_U <- param
# initialize list for Sighs
Sigh_ls <- list()
# individual PCAs
for (k in 1:length(sim_data)) {
pca_name <- paste0("pca", k)
Sigh_ls[[pca_name]] <- IndividualPCA(dat = sim_data, k = k)$Sig
metric_df[i, pca_name] <- subspace_recovery(Sig = Sig_true,
Sigh = Sigh_ls[[pca_name]],
dim_U = dim_U)
}
# concatenated PCA
Sigh_ls[["concatenated"]] <- ConcatenatedPCA(dat = sim_data)$Sig
metric_df[i, "concatenated"] <- subspace_recovery(Sig = Sig_true,
Sigh = Sigh_ls[["concatenated"]],
dim_U = dim_U)
# distributed PCA
Sigh_ls[["distributed"]] <- DistributedPCA(dat = sim_data)$Sig
metric_df[i, "distributed"] <- subspace_recovery(Sig = Sig_true,
Sigh = Sigh_ls[["distributed"]],
dim_U = dim_U)
# MFA
Sigh_ls[["mfa"]] <- my_MFA(dat = sim_data)$U
metric_df[i, "mfa"] <- subspace_recovery(Sig = Sig_true,
Uh = Sigh_ls[["mfa"]],
dim_U = dim_U)
metric_df
setwd("~/My Documents/Research/iPCA/R Sims/files/Plots")
library(R.utils)
library(ggpubr)
sourceDirectory("~/My Documents/R/", modifiedOnly = F, recursive = F) # useful functions
setwd("~/My Documents/Research/iPCA/R Sims/files/Plots")
setwd("~/My Documents/Research/iPCA/R Sims/files/Plots")
library(R.utils)
library(ggpubr)
sourceDirectory("~/My Documents/R/", modifiedOnly = F, recursive = F) # useful functions
#### View Metric Plots ####
idx <- 1; p <- list(); ext <- "_robust" # "_base", "_robust", "_other"
# n, pks, Dsig, laplace_err,
param_name <- "laplace_err"
setwd("~/My Documents/Research/iPCA/R Sims/files/Plots")
setwd(paste0("./default_model_vary_", param_name))
p[[idx]] <- readRDS("metric_plot.rds")
idx <- idx + 1
p[[1]]
str(p[[1]])
tmp <- readRDS("metric_plot_df.rds")
tmp
names(p[[1]])
str(p[[1]]$data)
p[[1]]$data$Mean/2
p[[1]]$data$Mean <- p[[1]]$data$Mean/2
p[[1]]
idx
setwd("~/My Documents/Research/iPCA/R Sims/files/Plots/jive_model_nonnormal/")
p[[idx]] <- readRDS("metric_plot.rds")
idx <- idx + 1
ncol <- 2; nrow <- 1 # for ext = "_robust", "_other"
p_all <- ggarrange(plotlist = p, ncol = ncol, nrow = nrow,
legend = "right", common.legend = T, labels = "AUTO")
p_all
saveRDS(p_all, paste0("../metric_plots", ext, ".rds"))
ext
# ggsave(paste0('../metric_plots', ext, ".pdf"), p_all, width=11, height=3.25) # for ext = "_base"
ggsave(paste0('../metric_plots', ext, ".pdf"), p_all, width=8, height=3.25) # for ext = "_robust"; "_other"
setwd("~/My Documents/Research/iPCA/R Public/sims")
library(reshape2)
library(RColorBrewer)
library(R.matlab)
library(simulator)
library(randomForest)
library(R.utils)
library(plotly)
library(foreach)
library(doParallel)
sourceDirectory("../funs/", modifiedOnly = F, recursive = F) # useful functions
#### ####
#### Illustrative Example ####
sim <- ipca_base_sim(nsim = 1, n = 200)[[1]]
str(sim)
sim_data <- sim$sim_data
truth <- sim$truth
sim <- ipca_base_sim(nsim = 1, n = 200)[[1]]
sim_data <- sim$sim_data
truth <- sim$truth
# initialize list of Sighs
Sigh_ls <- list()
# inidividual pca
for (k in 1:length(sim_data)) {
pca_name <- paste0("pca", k)
Sigh_ls[[pca_name]] <- IndividualPCA(dat = sim_data, k = k)$Sig
}
# multfrob
Sigh_ls[["multfrob"]] <- FFmleMultFrob(dat = sim_data, lamDs = c(100, 1, 10000))
# initialize plot list
plt_ls <- list()
plt_ls[[1]] <- plot_ipca(Sig = truth$Sig_true, y = truth$y_true,
plot_title = "Truth", show_plot = F)$ipca_plot
names(Sigh_ls[[1]])
names(Sigh_ls)
# initialize plot list
plt_ls <- list()
plt_ls[[1]] <- plot_ipca(Sig = truth$Sig_true, y = truth$y_true, show_plot = F,
plot_title = "Truth")$ipca_plot # plot truth
for (i in 1:length(Sigh_ls)) {
plt_ls[[i+1]] <- plot_ipca(Sig = Sigh_ls[[i]], y = truth$y_true, show_plot = F,
plot_title = names(Sigh_ls)[i])$ipca_plot
}
str(Sigh_ls)
# multfrob
Sigh_ls[["multfrob"]] <- FFmleMultFrob(dat = sim_data, lamDs = c(100, 1, 10000))$Sig
plt_ls <- list()
plt_ls[[1]] <- plot_ipca(Sig = truth$Sig_true, y = truth$y_true, show_plot = F,
plot_title = "Truth")$ipca_plot # plot truth
for (i in 1:length(Sigh_ls)) {
plt_ls[[i+1]] <- plot_ipca(Sig = Sigh_ls[[i]], y = truth$y_true, show_plot = F,
plot_title = names(Sigh_ls)[i])$ipca_plot
}
p_illustrative <- ggarrange(plotlist = plt_ls, nrow = 1, ncol = 5, labels = "AUTO")
p_illustrative
library(reshape2)
library(RColorBrewer)
library(R.matlab)
library(simulator)
library(randomForest)
library(R.utils)
library(plotly)
library(foreach)
library(doParallel)
sourceDirectory("../funs/", modifiedOnly = F, recursive = F) # useful functions
#### ####
#### EM CV and Convergence Plots ####
sim <- ipca_base_sim(n = 50, pks = c(60,70,70)) # simulate small datasets
#### ####
#### EM CV and Convergence Plots ####
sim <- ipca_base_sim(n = 50, pks = c(60,70,70), nsim = 1) # simulate small datasets
#### ####
#### EM CV and Convergence Plots ####
# simulate small datasets
sim <- ipca_base_sim(n = 50, pks = c(60,70,70), snr = 1, nsim = 1)
str(sim)
# only take two datasets for simplicity
sim_dat <- sim$sim_data[c(1,3)]
truth <- sim$truth
truth$Deltks_true <- truth$Deltks_true[c(1,3)]
str(sim_dat)
#### ####
#### EM CV and Convergence Plots ####
# simulate small datasets
sim <- ipca_base_sim(n = 50, pks = c(60,70,70), snr = 1, nsim = 1)
# only take two datasets for simplicity
sim_data <- sim[[1]]$sim_data[c(1,3)]
truth <- sim[[1]]$truth
truth$Deltks_true <- truth$Deltks_true[c(1,3)]
str(sim_data)
str(truth)
